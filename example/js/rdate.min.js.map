{"version":3,"file":"rdate.min.js","sources":["../src/index.js"],"sourcesContent":["class Rdate {\r\n    constructor() {\r\n        this.version = \"1.0.1\"\r\n        this.author = 'rookie_fly'\r\n        this.creator ='rookie_fly'\r\n        this.createDate ='2018-07-27'\r\n        this.updateDate = '2020-08-23'\r\n    }\r\n\r\n    /**\r\n     * ---------------核心方法--------------------\r\n     *                                           \r\n     * \r\n     */\r\n\r\n     /**\r\n      * ※ \r\n      * @param  {...any} args :形参，生效的最多为前两个参数\r\n      * 1个参数情况：\r\n      *      1.1 参数为格式，则默认格式化当前时间\r\n      *      1.2 参数为时间戳或字符串时间，则使用默认格式去格式化化给定的 时间戳或字符串时间\r\n      * 2个参数情况：\r\n      * 第一个参数表示格式化的日期，可以是时间戳或字符串时间\r\n      * 第二个参数表示格式\r\n      */\r\n     format(...args) {\r\n        // 解构参数，声明格式\r\n        let [a,b] = args,dt,format\r\n        // 如果没有传入参数，时间默认是当前时间，格式是默认格式\r\n        if(!args.length){\r\n            dt = new Date()\r\n            format = 'yyyy-MM-dd hh:mm:ss'\r\n        }else if(args.length==1){//如果只传入一个参数的情况，分两种情况进行检测\r\n            if(isNaN (new Date(a).valueOf())){//第一种情况：输入的是格式字符串，格式则使用传入的第一个参数作为格式，时间为默认时间\r\n                format = a\r\n                dt = new Date()\r\n            }else{//第二种情况：输入的时间字符串 或 时间戳，可以被解析，则时间就使用传入的第一个参数作为时间，格式使用默认格式\r\n                dt = new Date(typeof a == 'string'?a.replace(/-/g,'/'):a)\r\n                format = 'yyyy-MM-dd hh:mm:ss'\r\n            }\r\n        }else if(args.length>=2){//参数大于等于2时，第一个参数赋予时间，第二个参数赋予格式\r\n            dt = new Date(typeof a == 'string'?a.replace(/-/g,'/'):a)\r\n            format = b\r\n        }\r\n        // 时间补位对象\r\n        let ret = {\r\n            \"y+\": String(dt.getFullYear()),\r\n            \"M+\": String((dt.getMonth() + 1)).padStart(2, 0),\r\n            \"d+\": String(dt.getDate()).padStart(2, 0),\r\n            \"h+\": String(dt.getHours()).padStart(2, 0),\r\n            \"m+\": String(dt.getMinutes()).padStart(2, 0),\r\n            \"s+\": String(dt.getSeconds()).padStart(2, 0)\r\n        }\r\n\r\n        /**\r\n         * 标记并缓存模板内容\r\n         */\r\n        let mapVal = [] \r\n        format = format.replace(/\\[(.+?)\\]/g,function(a){\r\n            mapVal.push(a.slice(1,-1))\r\n            return \"|\"\r\n        })\r\n\r\n        /**\r\n         * 星期替换\r\n         */\r\n        if(format.includes('w')){\r\n            format = format.replace(/((w)+)/g, () => this.week(dt))\r\n        }\r\n\r\n        /**\r\n         * 时辰替换\r\n         */\r\n        if(format.includes('t')){\r\n            format = format.replace(/((t)+)/g, () => this.when(dt))\r\n            \r\n        }\r\n        /**\r\n         * 开始进行正常的时间格式替换\r\n         */\r\n        for (let k in ret) {\r\n            if (format.includes(k.substr(0, 1))) {\r\n                format = format.replace(new RegExp(k, \"g\"), a=>ret[k].substr(0, a.length))\r\n            }\r\n        }\r\n        \r\n        /**\r\n         * 模板字符串处理\r\n         */\r\n        let formatArr = format.split('|')\r\n        let res  = ''\r\n        for(let i=0;i<formatArr.length;i++){\r\n            res += (formatArr[i]+mapVal[i])\r\n        }\r\n\r\n        /** \r\n         * 处理特殊情况\r\n        */\r\n        if((res+' ').slice(-10,-1)==='undefined' && formatArr[formatArr.length-1]!=='|'){\r\n            res = res.slice(0,-9)\r\n        }\r\n        // 返回处理的结果\r\n        return res\r\n    }\r\n\r\n    /**\r\n     * ※ \r\n     * Rdate 的静态方法\r\n     * 用于 根据参数获取时间 的兼容：输入日期\r\n     * 第1种情况：用户没有传参数，即 dt === undefined，此时返回当前日期时间\r\n     * 第2种情况：用户传参数不符合规定（标准的时间戳和日期），此时返回当前日期时间\r\n     * 第3种情况：用户传参数符合规定（标准的时间戳和日期），此时返回给定日期\r\n     */\r\n    static _dt(dt){\r\n        return dt?new Date(typeof dt == 'string' && dt.indexOf('-')>-1?dt.replace(/-/g,'/'):dt):new Date()\r\n    }\r\n\r\n    /**\r\n     * 前后 中括号是否配对\r\n     * @param { String } str : 带 中括号的字符串\r\n     * @param { Number } index ：查找开始的索引\r\n     */\r\n    static isMatch(str,index){\r\n        // 往后查找 ]\r\n        let index1 = str.indexOf('[',index)\r\n        let index2 = str.indexOf(']',index)//肯定不能为 -1\r\n        // 往前查找 [\r\n        let index3 = str.lastIndexOf('[',index)//肯定不能为 -1\r\n        let index4 = str.lastIndexOf(']',index)\r\n        if(index2>-1 && index3>-1){\r\n            if(index1==-1 && index4==-1){\r\n                return true\r\n            }else{\r\n                if(index1>-1 &&  index4==-1){\r\n                    return index3<index4\r\n                }else {\r\n                    return  index2<index1\r\n                }\r\n            }\r\n        }\r\n        return  false\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     *                                           \r\n     * ---------------核心方法--------------------\r\n     */\r\n\r\n\r\n\r\n     /**\r\n      * --------------时间戳相关-------------------start----------------------------------------------\r\n      */\r\n\r\n    /**\r\n     * ※ \r\n     * 获取 （给定日期 | 当前日期） 前进（+）后退（-）n 天后的时间戳\r\n     * @param { Number } n : 前进（+）后退（-）n 天后的时间戳，不传默认是0，当天\r\n     * @param { String } dt : 给定日期\r\n     */\r\n\r\n    getStamp(dt,n){\r\n        let a = arguments\r\n        if(!a.length) return new Date().getTime()\r\n        // 如果只有 一个参数,则视为对当前时间的加减\r\n        if(a.length==1 && typeof a[0] === \"number\"){\r\n            n = a[0]\r\n            dt = undefined\r\n        }\r\n        let d=Rdate._dt(dt)\r\n        d.setDate(d.getDate() + (n === undefined ? 0 : n))\r\n        return +d\r\n    }\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 获取基于 （给定日期/当前时间） 的 前一天/后一天的时间戳\r\n     * @param  { String } dt : 给定日期\r\n     */\r\n    getStampBeforAfter(dt) {\r\n        let d = Rdate._dt(dt),b,a \r\n        d.setDate(d.getDate()-1)\r\n        b=+d\r\n        d.setDate(d.getDate()+2)\r\n        a = +d\r\n        return {before:b,after:a}   \r\n    }\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 定日期/今日 起止日期时间（00：00：00 ~ 23：59：59）\r\n     * @param { String } dt: 给定日期\r\n     */\r\n    getStampStartEnd(dt) {\r\n        let d = Rdate._dt(dt)\r\n        return {\r\n            start:+new Date(d.getFullYear(),d.getMonth(),d.getDate(),0,0,0) ,\r\n            end:+new Date(d.getFullYear(),d.getMonth(),d.getDate(),23,59,59)\r\n        } \r\n    }\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 获取两个时间戳相差多少天\r\n     * @param { Number } stamp1 ：时间戳\r\n     * @param { Number } stamp2 ：时间戳\r\n     */\r\n    getDaysByStamp(stamp1, stamp2) {\r\n        return parseInt(Math.abs(stamp1 - stamp2) / 86400000)\r\n    }\r\n\r\n      /**\r\n      * --------------时间戳相关-------------------end----------------------------------------------\r\n      */\r\n\r\n\r\n     /**\r\n      * --------------时间信息相关-------------------start----------------------------------------------\r\n      */\r\n\r\n    /**\r\n     * ※ \r\n     * 本周第一天\r\n     * @param { String } format ：格式，默认 yyyy-MM-dd\r\n     */\r\n    getCurWeekFirstDay() {\r\n        let d = new Date();\r\n        let f = new Date(d - (d.getDay() - 1) * 86400000);\r\n        return this.format(f,'yyyy-MM-dd')\r\n    }\r\n\r\n\r\n     /**\r\n      * ※ \r\n     * 本周最后一天\r\n     */\r\n    getCurWeekLastDay() {\r\n        let d = new Date(this.getCurWeekFirstDay()+' 00:00:00')\r\n        d.setDate(d.getDate()+6)\r\n        return this.format(d,'yyyy-MM-dd') \r\n    }\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 任一月份第一天\r\n     */\r\n    getMonthFirstDay(dt) {\r\n        let d = Rdate._dt(dt)\r\n        return this.format(d,'yyyy-MM-')+'01'\r\n    }\r\n\r\n    /**\r\n     * ※ \r\n     * 任一月份最后一天\r\n     * @param { String | Number} dt ：日期 或 时间戳\r\n     */\r\n    getMonthLastDay(dt) {\r\n        let d = Rdate._dt(dt)\r\n        d.setMonth(d.getMonth() + 1)//月份+1\r\n        d.setDate(1)//日设置成1号\r\n        d.setDate(d.getDate() -1)//倒退1日到当前月末最后一天\r\n        return this.format(d,'yyyy-MM-dd')\r\n    }\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 获取两个日期相差多少天\r\n     * @param {String | Number} d1 ：日期 或 时间戳\r\n     * @param {String | Number} d2 ：日期 或 时间戳\r\n     */\r\n    getDaysByDate(d1, d2) {\r\n        return parseInt(Math.abs(new Date(d1) - new Date(d2)) / 86400000)\r\n    }\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 获取 （给定日期 | 当前日期）为基准的 半年之前的日期\r\n     * @param { String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getHalfYear(dt) {\r\n        return this.format(new Date(Rdate._dt(dt)-15768000000),'yyyy-MM-dd')\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * ※ \r\n     * 距 （给定日期|当前日期） n 年 的日期\r\n     * @param { Number } n ：前进（+） 后退（-）n 年后的日期\r\n     * @param { String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getGapYearDate(n=0,dt) {\r\n        let d = Rdate._dt(dt);\r\n        d.setFullYear(d.getFullYear() + n);\r\n        return this.format(d,'yyyy-MM-dd')\r\n    }\r\n\r\n    /**\r\n     * ※ \r\n     * 距 （给定日期 | 当前日期） n 月 的日期\r\n     * @param { Number } n ：前进（+） 后退（-）n 月后的日期\r\n     * @param { String | Number } dt dt ：日期 或 时间戳\r\n     */\r\n    getGapMonthDate(n,dt) {\r\n        let d = Rdate._dt(dt);\r\n        d.setMonth(d.getMonth() + n);\r\n        return this.format(d,'yyyy-MM-dd')\r\n    }\r\n\r\n    /**\r\n     * 获取当前日期所在周任意星期对应的日期 ,比如我想知道这周5的日期你能告诉我吗？这个函数 就可以告诉你\r\n     * @param { Number } week ：星期\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getWeekByDate(week,dt) {\r\n        if(!arguments.length) throw('缺少参数week！')\r\n        // 获取日期时间\r\n        let d = Rdate._dt(dt)\r\n        //统一：用户传入 0 或 7 都是星期日\r\n        let w =week === 0? 7 : week\r\n        let i = d.getDay()===0?7:d.getDay()\r\n        if(w==i){//如果传入的星期和日期对应的星期一致，就直接返回该传入的日期\r\n            return this.format(d,'yyyy-MM-dd')\r\n        }else{\r\n            d.setDate(d.getDate() - (i - w));\r\n            return this.format(d,'yyyy-MM-dd')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取（给定日期 | 当前日期） 所在对应月份的第几周\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getMonthWeek(dt) {\r\n        let dd = Rdate._dt(dt);\r\n        let date = new Date(dd.getFullYear(), dd.getMonth(), dd.getDate()),\r\n            w = date.getDay(),\r\n            d = date.getDate();\r\n        if (w == 0) w = 7;\r\n        return {\r\n            getMonth: date.getMonth() + 1,\r\n            getYear: date.getFullYear(),\r\n            getWeek: Math.ceil((d + 6 - w) / 7),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取 （给定日期 | 当前日期） 所在对应年份的第几周\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getYearWeek(dt) {\r\n        let dd = Rdate._dt(dt)\r\n        let d1 = new Date(dd.getFullYear(), dd.getMonth(), dd.getDate()),\r\n            d2 = new Date(dd.getFullYear(), 0, 1),\r\n            d = Math.round((d1 - d2) / 86400000);\r\n        return Math.ceil((d + ((d2.getDay() + 1) - 1)) / 7);\r\n    }\r\n\r\n    /**\r\n     * 获取 （给定日期 | 当前日期） 对应的回显星期\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     * @param {String} prefix :前缀\r\n     */\r\n    week(dt=new Date(),prefix='星期'){\r\n        let d = Rdate._dt(dt)\r\n        return prefix+['日','一','二','三','四','五','六'][d.getDay()]\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取 （给定日期 | 当前日期） 对应的回显月份\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     * @param {String} suffix ：后缀\r\n     */\r\n    month(dt=new Date(),suffix='月'){\r\n        let d = Rdate._dt(dt)\r\n        return ['一','二','三','四','五','六','七','八','九','十','十一','十二'][d.getMonth()] + suffix\r\n    }\r\n\r\n    /**\r\n     * 获取 (给定日期 | 当前日期) 在对应的年份 | 月份 | 季度 中属于的第几周\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    weekInfo(dt) {\r\n        let getMonthWeek = function (a, b, c) {\r\n            var date = new Date(a, parseInt(b) - 1, c),w = date.getDay(),d = date.getDate();\r\n            return Math.ceil((d + 6 - w) / 7);\r\n        }\r\n        let getYearWeek = function (a, b, c) {\r\n            var date1 = new Date(a, parseInt(b) - 1, c),\r\n                date2 = new Date(a, 0, 1),\r\n                d = Math.round((date1.valueOf() - date2.valueOf()) / 86400000);\r\n            return Math.ceil((d + ((date2.getDay() + 1) - 1)) / 7);\r\n        }\r\n        let today = Rdate._dt(dt)\r\n        let y = today.getFullYear();\r\n        let m = today.getMonth() + 1;\r\n        let d = today.getDate();\r\n        let quarter = \"\";\r\n        let week=\"\"\r\n        let result = getYearWeek(y, m, d);\r\n        if (m < 4) {\r\n            quarter = 1;\r\n            week = result;\r\n        } else if (m < 7) {\r\n            quarter = 2;\r\n            week = result - getYearWeek(y, 4, 1);\r\n            var day = new Date(y, 4, 1);\r\n            if (day.getDay() > 1) {\r\n                week += 1;\r\n            }\r\n        } else if (m < 10) {\r\n            quarter = 3;\r\n            week = result - getYearWeek(y, 7, 1);\r\n            var day = new Date(y, 7, 1);\r\n            if (day.getDay() > 1) {\r\n                week += 1;\r\n            }\r\n        } else {\r\n            quarter = 4;\r\n            week = result - getYearWeek(y, 10, 1);\r\n            var day = new Date(y, 10, 1);\r\n            if (day.getDay() > 1) {\r\n                week += 1;\r\n            }\r\n        }\r\n        return {\r\n            year:y+'-'+m+'-'+d,\r\n            yearWeek: getYearWeek(y, m, d),\r\n            month:m,\r\n            monthWeek: getMonthWeek(y, m, d),\r\n            quarter,\r\n            quarterWeek:week\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 获取 （给定日期 | 当前日期）  所在周的起止日期\r\n     * @param {String | Number} dt ：日期 或 时间戳\r\n     */\r\n    getWeek(dt) {\r\n        let dd = Rdate._dt(dt)\r\n        let week = dd.getDay(); //获取时间的星期数\r\n        let minus = week ? week - 1 : 6;\r\n        dd.setDate(dd.getDate() - minus); //获取minus天前的日期\r\n        let start = this.format(dd,\"yyyy-MM-dd\")\r\n        dd.setDate(dd.getDate() + 6);\r\n        let end = this.format(dd,\"yyyy-MM-dd\")\r\n        return {start,end}\r\n    }\r\n\r\n    /**\r\n     * 星期回显\r\n     * \r\n     *  @param {String | Number}  i: 回显对应的数字\r\n     *  @param {String}  invalidTip: 传入的数字超出有效数字范围的提示语，默认是 Invalid week\r\n     * \r\n     */\r\n    previewWeek(i,prefix=\"周\",invalidTip){\r\n        return i>0&&i<8?prefix+['一','二','三','四','五','六','日'][i-1]:invalidTip===undefined? 'Invalid week':invalidTip\r\n    }\r\n\r\n    /**\r\n     * 月份回显\r\n     * @param { String | Number} i ：回显对应的数字\r\n     * @param { String } invalidTip  ：传入的数字超出有效数字范围的提示语，默认是 Invalid week\r\n     * @return String\r\n     */\r\n    previewMonth(i,invalidTip){\r\n        return i>0&&i<13? ['一','二','三','四','五','六','七','八','九','十','十一','十二'][i-1]+'月':invalidTip===undefined? 'Invalid month':invalidTip\r\n    }\r\n\r\n\r\n    /**\r\n     * 生成 基于当前 / 指定时间的 过去 n 天时间（包含当天日期）\r\n     * @param {Number} days 基于当前 / 指定时间的 过去 n 天时间（包含当天日期）\r\n     * @param {Boolean} s 指定时间\r\n     * @return 日期数组\r\n     */\r\n    getPassDaysDate(days,s)  {\r\n        if(!arguments.length)return [];\r\n        return [...Array(days*1+1).keys()].map(days=>new Date((s?new Date(s):Date.now()) - 86400000 * days).toLocaleDateString()).map(item=>item.split(/\\/|-/).map(i=>i.padStart(2,'0')).join('-')).splice(1)\r\n    }\r\n\r\n    /**\r\n     * --------------时间信息相关-------------------end----------------------------------------------\r\n     */\r\n\r\n\r\n    /**\r\n     * --------------验证相关-------------------start----------------------------------------------\r\n     */\r\n\r\n     /**\r\n     * 是否是润年\r\n     * @param { String } year ：年份\r\n     */\r\n    isLeapYear(year) {\r\n        return !(year % (year % 100 ? 4 : 400));\r\n    }\r\n\r\n    /**\r\n     * 判断时间（时分秒）格式是否有效\r\n     * @param { String } str ：时分秒\r\n     */\r\n    isTime(str) {\r\n        var a = str.match(/^(\\d{1,2})(:)?(\\d{1,2})\\2(\\d{1,2})$/);\r\n        if (a == null) {\r\n            return false;\r\n        }\r\n        if (a[1] >= 24 || a[3] >= 60 || a[4] >= 60) {\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 判断日期（年月日）格式是否有效\r\n     * @param {String} str ：年月日\r\n     */\r\n    isDateTime(str) {\r\n        let result = str.match(/^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2})$/);\r\n        if (result == null) return false;\r\n        let d = new Date(result[1], result[3] - 1, result[4]);\r\n        return (d.getFullYear() == result[1] && d.getMonth() + 1 == result[3] && d.getDate() == result[4]);\r\n    }\r\n\r\n    /**\r\n     * 判断 完整的年月日时分秒格式是否有效\r\n     * @param { String } str ：年月日时分秒\r\n     */\r\n    isAllDateTime(str) {\r\n        let result = str.match(/^(\\d{4})(-|\\/)(\\d{1,2})\\2(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/);\r\n        if (result == null) return false;\r\n        let d = new Date(result[1], result[3] - 1, result[4], result[5], result[6], result[7]);\r\n        return (d.getFullYear() == result[1] && (d.getMonth() + 1) == result[3] && d.getDate() == result[4] && d.getHours() == result[5] && d.getMinutes() == result[6] && d.getSeconds() == result[7]);\r\n    }\r\n\r\n\r\n    /**\r\n     * 验证一个日期是不是今天\r\n     * @param { String } dt： 日期\r\n     */\r\n    isToday(dt) {\r\n        return new Date().toLocaleDateString() == new Date(dt.replace(/-/g,'/')).toLocaleDateString();\r\n    }\r\n    /**\r\n     * 验证传入的日期是否是昨天\r\n     * @param {*} val \r\n     */\r\n    isYesterday(dt) {\r\n        let yesterday = new Date(new Date() - 1000 * 60 * 60 * 24);\r\n        let test = new Date(dt);\r\n        if (yesterday.getYear() === test.getYear() && yesterday.getMonth() === test.getMonth() && yesterday.getDate() === test.getDate()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // 验证日期大小\r\n    compareDate(d1, d2) {\r\n        return ((new Date(d1.replace(/-/g, \"/\"))) < (new Date(d2.replace(/-/g, \"/\"))));\r\n    }\r\n\r\n     /**\r\n     * --------------验证相关-------------------end----------------------------------------------\r\n     */\r\n\r\n\r\n     /**\r\n      * 新增 方法-----------------------------------------------------------------------\r\n      */\r\n\r\n    /**\r\n     * 计算两个日期间所有日期，以数组形式返回\r\n     * 新增时间：2020/8/23\r\n     * @param { string | number } startDate : 开始日期（13位时间戳 | 字符串日期）\r\n     * @param { string | number } endDate ：结束日期（13位时间戳 | 字符串日期）\r\n     * @return 日期间所有日期，以数组形式返回\r\n     */\r\n    getGapDates(startDate,endDate){\r\n        // 如果开始日期都没有，直接返回 []\r\n        if(!startDate)return []\r\n        // 辅助函数\r\n        let helper = (s,i) => new Date((+new Date(s)+ i*86400000)).toLocaleDateString().replace(/\\//g,'-')\r\n        // 开始日期时间戳\r\n        let startDateStamp = +new Date(new Date(startDate).toLocaleDateString())\r\n        // 结束日期时间戳\r\n        let endDateStamp = endDate? +new Date(new Date(endDate).toLocaleDateString()) : +new Date(new Date().toLocaleDateString())\r\n        // 如果两者相等\r\n        if(startDateStamp===endDateStamp)return [ helper(new Date(endDate?new Date():startDate),0) ]\r\n        // 获取最小的日期作为开始日期\r\n        startDate = startDateStamp<endDateStamp?new Date(startDateStamp):new Date(endDate?endDateStamp:+new Date())\r\n        // 获取最大的日期作为结束日期\r\n        endDate= startDateStamp<endDateStamp?new Date(endDate?endDateStamp :+new Date()):new Date(startDateStamp)\r\n        // 计算相差天数\r\n        let gapDays = parseInt(Math.abs(startDateStamp - endDateStamp) / 86400000) +1\r\n        // 返回结果\r\n        return Array(gapDays).fill(0).reduce((p,c,i)=>[...p,helper(startDate,i)],[])\r\n    } \r\n\r\n\r\n     /**\r\n      * 计算 当前时辰 或 指定时间 （年月日时分秒）\r\n      * \r\n      * 凌晨0：00－6：00，\r\n      * 早上 6：00-8:00；\r\n      * 上午 8：00-12：00，上午是指8-12点工作时间\r\n      * 中午12：00-14：00,中午是指12-14点午休时间\r\n      * 下午14：00-18：00，下午是指14-18点下午工作时间\r\n      * 晚上18：00-21：00；\r\n      * 深夜：21：00-24：00\r\n      *\r\n      * @param { string | number } dt ：指定时间\r\n      */\r\n    when(dt) {\r\n        let hour = Rdate._dt(dt).getHours()\r\n        return ['凌晨', '早上', '上午', '中午', '下午', '晚上', '深夜'][\r\n            hour >= 0 && hour <= 6 ? 0 :\r\n            hour > 6 && hour <= 8 ? 1 :\r\n            hour > 8 && hour <= 12 ? 2 :\r\n            hour > 12 && hour <= 14 ? 3 :\r\n            hour > 14 && hour <= 18 ? 4 :\r\n            hour > 18 && hour <= 21 ? 5 :6\r\n        ]\r\n    }\r\n}\r\n\r\nexport default Rdate"],"names":["version","author","creator","createDate","updateDate","dt","Date","indexOf","replace","str","index","index1","index2","index3","lastIndexOf","index4","args","format","a","b","length","isNaN","valueOf","ret","String","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","mapVal","push","slice","includes","_this","week","when","k","substr","RegExp","formatArr","split","res","i","n","arguments","getTime","undefined","d","Rdate","_dt","setDate","before","after","start","end","stamp1","stamp2","parseInt","Math","abs","f","getDay","this","getCurWeekFirstDay","setMonth","d1","d2","setFullYear","w","dd","date","getYear","getWeek","ceil","round","suffix","getYearWeek","c","date1","date2","today","y","m","quarter","result","year","yearWeek","month","monthWeek","quarterWeek","minus","invalidTip","days","s","_toConsumableArray","Array","keys","map","now","toLocaleDateString","item","join","splice","match","yesterday","test","startDate","endDate","helper","startDateStamp","endDateStamp","gapDays","fill","reduce","p","hour"],"mappings":"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"}