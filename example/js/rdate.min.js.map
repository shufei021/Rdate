{"version":3,"file":"rdate.min.js","sources":["../src/index.js"],"sourcesContent":["class Rdate {\r\n    constructor() {\r\n        this.version = \"1.0.1\"\r\n        this.author = 'rookie_fly'\r\n        this.creator ='rookie_fly'\r\n        this.createDate ='2018-07-27'\r\n        this.updateDate = '2020-08-22'\r\n    }\r\n\r\n    /**\r\n     * ---------------核心方法--------------------\r\n     *                                           \r\n     * \r\n     */\r\n\r\n     /**\r\n      * ※ 完结：不会再改\r\n      * @param  {...any} args :形参，生效的最多为前两个参数\r\n      * 1个参数情况：\r\n      *      1.1 参数为格式，则默认格式化当前时间\r\n      *      1.2 参数为时间戳或字符串时间，则使用默认格式去格式化化给定的 时间戳或字符串时间\r\n      * 2个参数情况：\r\n      * 第一个参数表示格式化的日期，可以是时间戳或字符串时间\r\n      * 第二个参数表示格式\r\n      */\r\n     format(...args) {\r\n        let [a,b] = args,dt,format\r\n        if(!args.length){\r\n            dt = new Date()\r\n            format = 'yyyy-MM-dd hh:mm:ss'\r\n        }else if(args.length==1){\r\n            if(isNaN (new Date(a).valueOf())){\r\n                format = a\r\n                dt = new Date()\r\n            }else{\r\n                dt = new Date(typeof a == 'string'?a.replace(/-/g,'/'):a)\r\n                format = 'yyyy-MM-dd hh:mm:ss'\r\n            }\r\n        }else if(args.length>=2){\r\n            dt = new Date(typeof a == 'string'?a.replace(/-/g,'/'):a)\r\n            format = b\r\n        }\r\n        let ret = {\r\n            \"y+\": String(dt.getFullYear()),\r\n            \"M+\": String((dt.getMonth() + 1)).padStart(2, 0),\r\n            \"d+\": String(dt.getDate()).padStart(2, 0),\r\n            \"h+\": String(dt.getHours()).padStart(2, 0),\r\n            \"m+\": String(dt.getMinutes()).padStart(2, 0),\r\n            \"s+\": String(dt.getSeconds()).padStart(2, 0),\r\n        }\r\n        for (let k in ret) {\r\n            if (format.includes(k.substr(0, 1))) {\r\n                format = format.replace(new RegExp(k, \"g\"), i => ret[k].substr(0, i.length))\r\n            }\r\n        }\r\n        return format\r\n    }\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * Rdate 的静态方法\r\n     * 用于 根据参数获取时间 的兼容：输入日期\r\n     * 第1种情况：用户没有传参数，即 dt === undefined，此时返回当前日期时间\r\n     * 第2种情况：用户传参数不符合规定（标准的时间戳和日期），此时返回当前日期时间\r\n     * 第3种情况：用户传参数符合规定（标准的时间戳和日期），此时返回给定日期\r\n     */\r\n    static _dt(dt){\r\n        return dt?new Date(typeof dt == 'string' && dt.indexOf('-')>-1?dt.replace(/-/g,'/'):dt):new Date()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     *                                           \r\n     * ---------------核心方法--------------------\r\n     */\r\n\r\n\r\n\r\n     /**\r\n      * --------------时间戳相关-------------------start----------------------------------------------\r\n      */\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 获取 （给定日期 | 当前日期） 前进（+）后退（-）n 天后的时间戳\r\n     * @param { Number } n : 前进（+）后退（-）n 天后的时间戳，不传默认是0，当天\r\n     * @param { String } dt : 给定日期\r\n     */\r\n\r\n    getStamp(dt,n){\r\n        let a = arguments\r\n        if(!a.length) return new Date().getTime()\r\n        // 如果只有 一个参数,则视为对当前时间的加减\r\n        if(a.length==1 && typeof a[0] === \"number\"){\r\n            n = a[0]\r\n            dt = undefined\r\n        }\r\n        let d=Rdate._dt(dt)\r\n        d.setDate(d.getDate() + (n === undefined ? 0 : n))\r\n        return +d\r\n    }\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 获取基于 （给定日期/当前时间） 的 前一天/后一天的时间戳\r\n     * @param  { String } dt : 给定日期\r\n     */\r\n    getStampBeforAfter(dt) {\r\n        let d = Rdate._dt(dt),b,a \r\n        d.setDate(d.getDate()-1)\r\n        b=+d\r\n        d.setDate(d.getDate()+2)\r\n        a = +d\r\n        return {before:b,after:a}   \r\n    }\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 定日期/今日 起止日期时间（00：00：00 ~ 23：59：59）\r\n     * @param { String } dt: 给定日期\r\n     */\r\n    getStampStartEnd(dt) {\r\n        let d = Rdate._dt(dt)\r\n        return {\r\n            start:+new Date(d.getFullYear(),d.getMonth(),d.getDate(),0,0,0) ,\r\n            end:+new Date(d.getFullYear(),d.getMonth(),d.getDate(),23,59,59)\r\n        } \r\n    }\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 获取两个时间戳相差多少天\r\n     * @param { Number } stamp1 ：时间戳\r\n     * @param { Number } stamp2 ：时间戳\r\n     */\r\n    getDaysByStamp(stamp1, stamp2) {\r\n        return parseInt(Math.abs(stamp1 - stamp2) / 86400000)\r\n    }\r\n\r\n      /**\r\n      * --------------时间戳相关-------------------end----------------------------------------------\r\n      */\r\n\r\n\r\n     /**\r\n      * --------------时间信息相关-------------------start----------------------------------------------\r\n      */\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 本周第一天\r\n     * @param { String } format ：格式，默认 yyyy-MM-dd\r\n     */\r\n    getCurWeekFirstDay() {\r\n        let d = new Date();\r\n        let f = new Date(d - (d.getDay() - 1) * 86400000);\r\n        return this.format(f,'yyyy-MM-dd')\r\n    }\r\n\r\n\r\n     /**\r\n      * ※ 完结：不会再改\r\n     * 本周最后一天\r\n     */\r\n    getCurWeekLastDay() {\r\n        let d = new Date(this.getCurWeekFirstDay()+' 00:00:00')\r\n        d.setDate(d.getDate()+6)\r\n        return this.format(d,'yyyy-MM-dd') \r\n    }\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 任一月份第一天\r\n     */\r\n    getMonthFirstDay(dt) {\r\n        let d = Rdate._dt(dt)\r\n        return this.format(d,'yyyy-MM-')+'01'\r\n    }\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 任一月份最后一天\r\n     * @param { String | Number} dt ：日期 或 时间戳\r\n     */\r\n    getMonthLastDay(dt) {\r\n        let d = Rdate._dt(dt)\r\n        d.setMonth(d.getMonth() + 1)//月份+1\r\n        d.setDate(1)//日设置成1号\r\n        d.setDate(d.getDate() -1)//倒退1日到当前月末最后一天\r\n        return this.format(d,'yyyy-MM-dd')\r\n    }\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 获取两个日期相差多少天\r\n     * @param {String | Number} d1 ：日期 或 时间戳\r\n     * @param {String | Number} d2 ：日期 或 时间戳\r\n     */\r\n    getDaysByDate(d1, d2) {\r\n        return parseInt(Math.abs(new Date(d1) - new Date(d2)) / 86400000)\r\n    }\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 获取 （给定日期 | 当前日期）为基准的 半年之前的日期\r\n     * @param { String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getHalfYear(dt) {\r\n        return this.format(new Date(Rdate._dt(dt)-15768000000),'yyyy-MM-dd')\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * ※ 完结：不会再改\r\n     * 距 （给定日期|当前日期） n 年 的日期\r\n     * @param { Number } n ：前进（+） 后退（-）n 年后的日期\r\n     * @param { String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getGapYearDate(n=0,dt) {\r\n        let d = Rdate._dt(dt);\r\n        d.setFullYear(d.getFullYear() + n);\r\n        return this.format(d,'yyyy-MM-dd')\r\n    }\r\n\r\n    /**\r\n     * ※ \r\n     * 距 （给定日期 | 当前日期） n 月 的日期\r\n     * @param { Number } n ：前进（+） 后退（-）n 月后的日期\r\n     * @param { String | Number } dt dt ：日期 或 时间戳\r\n     */\r\n    getGapMonthDate(n,dt) {\r\n        let d = Rdate._dt(dt);\r\n        d.setMonth(d.getMonth() + n);\r\n        return this.format(d,'yyyy-MM-dd')\r\n    }\r\n\r\n    /**\r\n     * 获取当前日期所在周任意星期对应的日期 ,比如我想知道这周5的日期你能告诉我吗？这个函数 就可以告诉你\r\n     * @param { Number } week ：星期\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getWeekByDate(week,dt) {\r\n        if(!arguments.length) throw('缺少参数week！')\r\n        // 获取日期时间\r\n        let d = Rdate._dt(dt)\r\n        //统一：用户传入 0 或 7 都是星期日\r\n        let w =week === 0? 7 : week\r\n        let i = d.getDay()===0?7:d.getDay()\r\n        if(w==i){//如果传入的星期和日期对应的星期一致，就直接返回该传入的日期\r\n            return this.format(d,'yyyy-MM-dd')\r\n        }else{\r\n            d.setDate(d.getDate() - (i - w));\r\n            return this.format(d,'yyyy-MM-dd')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取（给定日期 | 当前日期） 所在对应月份的第几周\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getMonthWeek(dt) {\r\n        let dd = Rdate._dt(dt);\r\n        let date = new Date(dd.getFullYear(), dd.getMonth(), dd.getDate()),\r\n            w = date.getDay(),\r\n            d = date.getDate();\r\n        if (w == 0) w = 7;\r\n        return {\r\n            getMonth: date.getMonth() + 1,\r\n            getYear: date.getFullYear(),\r\n            getWeek: Math.ceil((d + 6 - w) / 7),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取 （给定日期 | 当前日期） 所在对应年份的第几周\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    getYearWeek(dt) {\r\n        let dd = Rdate._dt(dt)\r\n        let d1 = new Date(dd.getFullYear(), dd.getMonth(), dd.getDate()),\r\n            d2 = new Date(dd.getFullYear(), 0, 1),\r\n            d = Math.round((d1 - d2) / 86400000);\r\n        return Math.ceil((d + ((d2.getDay() + 1) - 1)) / 7);\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取 (给定日期 | 当前日期) 在对应的年份 | 月份 | 季度 中属于的第几周\r\n     * @param {String | Number } dt ：日期 或 时间戳\r\n     */\r\n    weekInfo(dt) {\r\n        let getMonthWeek = function (a, b, c) {\r\n            var date = new Date(a, parseInt(b) - 1, c),w = date.getDay(),d = date.getDate();\r\n            return Math.ceil((d + 6 - w) / 7);\r\n        }\r\n        let getYearWeek = function (a, b, c) {\r\n            var date1 = new Date(a, parseInt(b) - 1, c),\r\n                date2 = new Date(a, 0, 1),\r\n                d = Math.round((date1.valueOf() - date2.valueOf()) / 86400000);\r\n            return Math.ceil((d + ((date2.getDay() + 1) - 1)) / 7);\r\n        }\r\n        let today = Rdate._dt(dt)\r\n        let y = today.getFullYear();\r\n        let m = today.getMonth() + 1;\r\n        let d = today.getDate();\r\n        let quarter = \"\";\r\n        let week=\"\"\r\n        let result = getYearWeek(y, m, d);\r\n        if (m < 4) {\r\n            quarter = 1;\r\n            week = result;\r\n        } else if (m < 7) {\r\n            quarter = 2;\r\n            week = result - getYearWeek(y, 4, 1);\r\n            var day = new Date(y, 4, 1);\r\n            if (day.getDay() > 1) {\r\n                week += 1;\r\n            }\r\n        } else if (m < 10) {\r\n            quarter = 3;\r\n            week = result - getYearWeek(y, 7, 1);\r\n            var day = new Date(y, 7, 1);\r\n            if (day.getDay() > 1) {\r\n                week += 1;\r\n            }\r\n        } else {\r\n            quarter = 4;\r\n            week = result - getYearWeek(y, 10, 1);\r\n            var day = new Date(y, 10, 1);\r\n            if (day.getDay() > 1) {\r\n                week += 1;\r\n            }\r\n        }\r\n        return {\r\n            year:y+'-'+m+'-'+d,\r\n            yearWeek: getYearWeek(y, m, d),\r\n            month:m,\r\n            monthWeek: getMonthWeek(y, m, d),\r\n            quarter,\r\n            quarterWeek:week\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 获取 （给定日期 | 当前日期）  所在周的起止日期\r\n     * @param {String | Number} dt ：日期 或 时间戳\r\n     */\r\n    getWeek(dt) {\r\n        let dd = Rdate._dt(dt)\r\n        let week = dd.getDay(); //获取时间的星期数\r\n        let minus = week ? week - 1 : 6;\r\n        dd.setDate(dd.getDate() - minus); //获取minus天前的日期\r\n        let start = this.format(dd,\"yyyy-MM-dd\")\r\n        dd.setDate(dd.getDate() + 6);\r\n        let end = this.format(dd,\"yyyy-MM-dd\")\r\n        return {start,end}\r\n    }\r\n\r\n     /**\r\n     * \r\n     * @param {String | Number} startDate : 开始的日期 （日期 或 时间戳）\r\n     * @param {String | Number} endDate : 结束的日期 （日期 或 时间戳）\r\n     */\r\n    getDiffDate(startDate,endDate){\r\n        if(!startDate)return this.format('yyyy-MM-dd')\r\n        let end = endDate || this.format('yyyy-MM-dd')\r\n        let diff = parseInt(Math.abs(new Date(startDate.split(' ')[0]+' 00:00:00') - new Date(end.split(' ')[0]+' 00:00:00'))/1000/24/60/60)+1\r\n        return Array(diff).fill(0).reduce((p,c,i)=>[...p,this.format(this.getStamp(startDate)+i*86400000,'yyyy-MM-dd')],[])\r\n    }\r\n\r\n\r\n    /**\r\n     * 星期回显\r\n     * \r\n     *  @param {String | Number}  i: 回显对应的数字\r\n     *  @param {String}  invalidTip: 传入的数字超出有效数字范围的提示语，默认是 Invalid week\r\n     * \r\n     */\r\n    previewWeek(i,prefix=\"周\",invalidTip){\r\n        return i>0&&i<8?prefix+['一','二','三','四','五','六','日'][i-1]:invalidTip===undefined? 'Invalid week':invalidTip\r\n    }\r\n\r\n    /**\r\n     * 月份回显\r\n     * @param { String | Number} i ：回显对应的数字\r\n     * @param { String } invalidTip  ：传入的数字超出有效数字范围的提示语，默认是 Invalid week\r\n     * @return String\r\n     */\r\n    previewMonth(i,invalidTip){\r\n        return i>0&&i<13? ['一','二','三','四','五','六','七','八','九','十','十一','十二'][i-1]+'月':invalidTip===undefined? 'Invalid month':invalidTip\r\n    }\r\n\r\n\r\n    /**\r\n     * 生成 基于当前 / 指定时间的 过去 n 天时间（包含当天日期）\r\n     * @param {Number} days 基于当前 / 指定时间的 过去 n 天时间（包含当天日期）\r\n     * @param {Boolean} s 指定时间\r\n     * @return 日期数组\r\n     */\r\n    getPassDaysDate(days,s)  {\r\n        if(!arguments.length)return [];\r\n        return [...Array(days*1+1).keys()].map(days=>new Date((s?new Date(s):Date.now()) - 86400000 * days).toLocaleDateString()).map(item=>item.split(/\\/|-/).map(i=>i.padStart(2,'0')).join('-')).splice(1)\r\n    }\r\n\r\n    /**\r\n     * --------------时间信息相关-------------------end----------------------------------------------\r\n     */\r\n\r\n\r\n    /**\r\n     * --------------验证相关-------------------start----------------------------------------------\r\n     */\r\n\r\n     /**\r\n     * 是否是润年\r\n     * @param { String } year ：年份\r\n     */\r\n    isLeapYear(year) {\r\n        return !(year % (year % 100 ? 4 : 400));\r\n    }\r\n\r\n    /**\r\n     * 判断时间（时分秒）格式是否有效\r\n     * @param { String } str ：时分秒\r\n     */\r\n    isTime(str) {\r\n        var a = str.match(/^(\\d{1,2})(:)?(\\d{1,2})\\2(\\d{1,2})$/);\r\n        if (a == null) {\r\n            return false;\r\n        }\r\n        if (a[1] >= 24 || a[3] >= 60 || a[4] >= 60) {\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 判断日期（年月日）格式是否有效\r\n     * @param {String} str ：年月日\r\n     */\r\n    isDateTime(str) {\r\n        let result = str.match(/^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2})$/);\r\n        if (result == null) return false;\r\n        let d = new Date(result[1], result[3] - 1, result[4]);\r\n        return (d.getFullYear() == result[1] && d.getMonth() + 1 == result[3] && d.getDate() == result[4]);\r\n    }\r\n\r\n    /**\r\n     * 判断 完整的年月日时分秒格式是否有效\r\n     * @param { String } str ：年月日时分秒\r\n     */\r\n    isAllDateTime(str) {\r\n        let result = str.match(/^(\\d{4})(-|\\/)(\\d{1,2})\\2(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/);\r\n        if (result == null) return false;\r\n        let d = new Date(result[1], result[3] - 1, result[4], result[5], result[6], result[7]);\r\n        return (d.getFullYear() == result[1] && (d.getMonth() + 1) == result[3] && d.getDate() == result[4] && d.getHours() == result[5] && d.getMinutes() == result[6] && d.getSeconds() == result[7]);\r\n    }\r\n\r\n\r\n    /**\r\n     * 验证一个日期是不是今天\r\n     * @param { String } dt： 日期\r\n     */\r\n    isToday(dt) {\r\n        return new Date().toLocaleDateString() == new Date(dt.replace(/-/g,'/')).toLocaleDateString();\r\n    }\r\n    /**\r\n     * 验证传入的日期是否是昨天\r\n     * @param {*} val \r\n     */\r\n    isYesterday(dt) {\r\n        let yesterday = new Date(new Date() - 1000 * 60 * 60 * 24);\r\n        let test = new Date(dt);\r\n        if (yesterday.getYear() === test.getYear() && yesterday.getMonth() === test.getMonth() && yesterday.getDate() === test.getDate()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // 验证日期大小\r\n    compareDate(d1, d2) {\r\n        return ((new Date(d1.replace(/-/g, \"/\"))) < (new Date(d2.replace(/-/g, \"/\"))));\r\n    }\r\n\r\n     /**\r\n     * --------------验证相关-------------------end----------------------------------------------\r\n     */\r\n}\r\n\r\nconst rdate = new Rdate()\r\n\r\nexport default rdate"],"names":["version","author","creator","createDate","updateDate","dt","Date","indexOf","replace","args","format","a","b","length","isNaN","valueOf","ret","String","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","k","includes","substr","RegExp","i","n","arguments","getTime","undefined","d","Rdate","_dt","setDate","before","after","start","end","stamp1","stamp2","parseInt","Math","abs","f","getDay","this","getCurWeekFirstDay","setMonth","d1","d2","setFullYear","week","w","dd","date","getYear","getWeek","ceil","round","getYearWeek","c","date1","date2","today","y","m","quarter","result","year","yearWeek","month","monthWeek","quarterWeek","minus","startDate","endDate","diff","split","Array","fill","reduce","p","_this","getStamp","invalidTip","days","s","_toConsumableArray","keys","map","now","toLocaleDateString","item","join","splice","str","match","yesterday","test"],"mappings":"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"}